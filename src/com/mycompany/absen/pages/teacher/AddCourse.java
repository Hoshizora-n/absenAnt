/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.absen.pages.teacher;

import com.mycompany.absen.data.Global;
import com.mycompany.absen.data.Koneksi;
import com.mycompany.absen.data.model.Semesters;
import com.mycompany.absen.data.model.StudyPrograms;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author atha.dhaiffathin
 */
public class AddCourse extends javax.swing.JDialog {
    
    private Map<String, Integer> idMap;
    private Map<String, Integer> prodiMap;
    
    private ArrayList<Semesters> semesters;
    private ArrayList<StudyPrograms> studyPrograms;

    /**
     * Creates new form AddCourse
     */
    public AddCourse(java.awt.Frame parent, boolean modal, ArrayList<Semesters> semester, ArrayList<StudyPrograms> prodi) {
        super(parent, modal);
        idMap = new HashMap<>();
        prodiMap = new HashMap<>();
        
        semesters = semester;
        studyPrograms = prodi;
        
        initComponents();
        populateComboBox();
    }
    
    private void populateComboBox() {
        Koneksi koneksi = Koneksi.getInstance();
        
        Vector<String> semItems = new Vector<>();
        Vector<String> prodiItems = new Vector<>();
        
        for (Semesters semester : semesters) {
            semItems.add(semester.getName());
            idMap.put(semester.getName(), semester.getId());
        }

        for (StudyPrograms prodi : studyPrograms) {
            prodiItems.add(prodi.getName());
            prodiMap.put(prodi.getName(), prodi.getId());
        }
        
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(semItems);
        semesterInput.setModel(model);
        
        DefaultComboBoxModel<String> prodiModel = new DefaultComboBoxModel<>(prodiItems);
        prodiInput.setModel(prodiModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        timeInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        scheduleInput = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        semesterInput = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        prodiInput = new javax.swing.JComboBox<>();
        add = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        dayInput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Add Course");

        jLabel2.setText("Name:");

        jLabel3.setText("Time:");

        jLabel4.setText("Schedule:");

        jLabel5.setText("Semester:");

        semesterInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Prodi:");

        prodiInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        add.setText("Create");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jLabel7.setText("Day:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(nameInput)
                                .addComponent(timeInput, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE))
                            .addComponent(dayInput, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(scheduleInput))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(semesterInput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(prodiInput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(timeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dayInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(scheduleInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(semesterInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(prodiInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static final String DATE_RANGE_PATTERN = "^\\d{2}/\\d{2}/\\d{4}-\\d{2}/\\d{2}/\\d{4}$";

    public static boolean isValidDateRange(String dateRange) {
        // Check the format of the date range string
        if (!dateRange.matches(DATE_RANGE_PATTERN)) {
            return false;
        }

        // Extract start and end dates
        String[] dates = dateRange.split("-");
        String startDateStr = dates[0];
        String endDateStr = dates[1];

        // Validate date format and ensure end date is greater than start date
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            Date startDate = dateFormat.parse(startDateStr);
            Date endDate = dateFormat.parse(endDateStr);

            return startDate.before(endDate);
        } catch (ParseException e) {
            // Handle parsing exception if the date format is incorrect
            e.printStackTrace();
            return false;
        }
    }

    private static final String TIME_RANGE_PATTERN = "^([01]?[0-9]|2[0-3]):[0-5][0-9]-([01]?[0-9]|2[0-3]):[0-5][0-9]$";

    public static boolean isValidTimeRange(String timeRange) {
        Pattern pattern = Pattern.compile(TIME_RANGE_PATTERN);
        Matcher matcher = pattern.matcher(timeRange);

        if (!matcher.matches()) {
            return false; // Pattern doesn't match
        }

        // Extract hours and minutes
        String[] times = timeRange.split("-");
        String startTime = times[0];
        String endTime = times[1];

        // Compare start and end times
        int startHour = Integer.parseInt(startTime.split(":")[0]);
        int startMinute = Integer.parseInt(startTime.split(":")[1]);
        int endHour = Integer.parseInt(endTime.split(":")[0]);
        int endMinute = Integer.parseInt(endTime.split(":")[1]);

        // Ensure end time does not exceed 23:59
        if (endHour > 23 || (endHour == 23 && endMinute > 59)) {
            return false;
        }

        return startHour < endHour || (startHour == endHour && startMinute < endMinute);
    }
    
    private static final List<String> VALID_DAYS = Arrays.asList(
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    );

    public static boolean isValidDayOfWeek(String dayOfWeek) {
        return VALID_DAYS.contains(dayOfWeek);
    }
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        String name = nameInput.getText();
        String time = timeInput.getText();
        String schedule = scheduleInput.getText();
        String day = dayInput.getText();
        Integer prodi = prodiMap.get(prodiInput.getSelectedItem());
        Integer semester = idMap.get(semesterInput.getSelectedItem());
        
//        if (time)
        
        if (name.equals("")) {
            JOptionPane.showMessageDialog(null, "name can't empty", "validation error", JOptionPane.WARNING_MESSAGE);
        } else if (!isValidTimeRange(time)) {
            JOptionPane.showMessageDialog(null, "time is not valid", "validation error", JOptionPane.WARNING_MESSAGE);
        } else if (!isValidDateRange(schedule)) {
            JOptionPane.showMessageDialog(null, "schedule is not valid", "validation error", JOptionPane.WARNING_MESSAGE);
        } else if (!isValidDayOfWeek(day)) {
            JOptionPane.showMessageDialog(null, "day is not valid", "validation error", JOptionPane.WARNING_MESSAGE);
        } else {
            Koneksi koneksi = Koneksi.getInstance();

            try (Connection conn = koneksi.getConnection()) {
                String query = "INSERT INTO courses (teacher_id, name, time, schedule, day, semester_id, study_id) VALUES (?, ?, ?, ?, ?, ?, ?)";

                try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
                    preparedStatement.setLong(1, Global.getInstance().getTeacherId());
                    preparedStatement.setString(2, name);
                    preparedStatement.setString(3, time);
                    preparedStatement.setString(4, schedule);
                    preparedStatement.setString(5, day);
                    preparedStatement.setInt(6, semester);
                    preparedStatement.setInt(7, prodi);

                    // Use executeUpdate() for INSERT, UPDATE, or DELETE statements
                    int affectedRows = preparedStatement.executeUpdate();

                    if (affectedRows > 0) {
                        System.out.println("Insert courses successful!");
                    } else {
                        throw new SQLException("Failed to insert courses");
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Success create course " + name, "Create courses", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e, "Exception", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_addActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                AddCourse dialog = new AddCourse(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField dayInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField nameInput;
    private javax.swing.JComboBox<String> prodiInput;
    private javax.swing.JTextField scheduleInput;
    private javax.swing.JComboBox<String> semesterInput;
    private javax.swing.JTextField timeInput;
    // End of variables declaration//GEN-END:variables
}
